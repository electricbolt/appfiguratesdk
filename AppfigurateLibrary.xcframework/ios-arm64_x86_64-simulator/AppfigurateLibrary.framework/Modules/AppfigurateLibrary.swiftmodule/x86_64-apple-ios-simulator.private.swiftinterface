// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppfigurateLibrary
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AppfigurateLibrary
import Foundation
import Swift
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class APLPropertyWrapperIntrospection : ObjectiveC.NSObject {
  @objc public static func shared() -> AppfigurateLibrary.APLPropertyWrapperIntrospection
  @objc public func getPropertyName(_ name: Swift.String!, configuration: AppfigurateLibrary.APLConfiguration!) -> [Swift.AnyHashable : Any]!
  @objc deinit
}
public protocol AppfigurateProperty {
}
public protocol _BoolProtocol {
}
extension Swift.Bool : AppfigurateLibrary._BoolProtocol {
}
@propertyWrapper public struct BoolProperty<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._BoolProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public init(description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
public protocol _IntProtocol {
}
extension Swift.Int : AppfigurateLibrary._IntProtocol {
}
@propertyWrapper public struct IntPropertySlider<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._IntProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Int
  public let max: Swift.Int
  public let icon: AppfigurateLibrary.APLIconSlider
  public init(min: Swift.Int, max: Swift.Int, icon: AppfigurateLibrary.APLIconSlider, description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct IntPropertyEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._IntProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Int
  public let max: Swift.Int
  public let regex: Swift.String
  public init(min: Swift.Int, max: Swift.Int, regex: Swift.String, description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct IntPropertyList<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._IntProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let values: [Swift.String : Swift.Int]
  public init(description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.Int])
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct IntPropertyListEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._IntProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Int
  public let max: Swift.Int
  public let regex: Swift.String
  public let values: [Swift.String : Swift.Int]
  public init(min: Swift.Int, max: Swift.Int, regex: Swift.String, description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.Int])
  public var wrappedValue: T {
    get
    set
  }
}
public protocol _FloatProtocol {
}
extension Swift.Float : AppfigurateLibrary._FloatProtocol {
}
@propertyWrapper public struct FloatPropertySlider<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._FloatProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Float
  public let max: Swift.Float
  public let icon: AppfigurateLibrary.APLIconSlider
  public init(min: Swift.Float, max: Swift.Float, icon: AppfigurateLibrary.APLIconSlider, description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct FloatPropertyEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._FloatProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Float
  public let max: Swift.Float
  public let regex: Swift.String
  public init(min: Swift.Float, max: Swift.Float, regex: Swift.String, description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct FloatPropertyList<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._FloatProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let values: [Swift.String : Swift.Float]
  public init(description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.Float])
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct FloatPropertyListEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._FloatProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Float
  public let max: Swift.Float
  public let regex: Swift.String
  public let values: [Swift.String : Swift.Float]
  public init(min: Swift.Float, max: Swift.Float, regex: Swift.String, description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.Float])
  public var wrappedValue: T {
    get
    set
  }
}
public protocol _DoubleProtocol {
}
extension Swift.Double : AppfigurateLibrary._DoubleProtocol {
}
@propertyWrapper public struct DoublePropertySlider<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._DoubleProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Double
  public let max: Swift.Double
  public let icon: AppfigurateLibrary.APLIconSlider
  public init(min: Swift.Double, max: Swift.Double, icon: AppfigurateLibrary.APLIconSlider, description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct DoublePropertyEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._DoubleProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Float
  public let max: Swift.Float
  public let regex: Swift.String
  public init(min: Swift.Float, max: Swift.Float, regex: Swift.String, description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct DoublePropertyList<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._DoubleProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let values: [Swift.String : Swift.Float]
  public init(description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.Float])
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct DoublePropertyListEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._DoubleProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let min: Swift.Double
  public let max: Swift.Double
  public let regex: Swift.String
  public let values: [Swift.String : Swift.Double]
  public init(min: Swift.Double, max: Swift.Double, regex: Swift.String, description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.Double])
  public var wrappedValue: T {
    get
    set
  }
}
public protocol _StringProtocol {
}
extension Swift.String : AppfigurateLibrary._StringProtocol {
}
@propertyWrapper public struct StringPropertyEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._StringProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let regex: Swift.String
  public init(regex: Swift.String, description: Swift.String, restart: Swift.Bool)
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct StringPropertyList<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._StringProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let values: [Swift.String : Swift.String]
  public init(description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.String])
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct StringPropertyListEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._StringProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let regex: Swift.String
  public let values: [Swift.String : Swift.String]
  public init(regex: Swift.String, description: Swift.String, restart: Swift.Bool, values: [Swift.String : Swift.String])
  public var wrappedValue: T {
    get
    set
  }
}
@propertyWrapper public struct EncryptedStringPropertyListEdit<T> : AppfigurateLibrary.AppfigurateProperty where T : AppfigurateLibrary._StringProtocol {
  public let description: Swift.String
  public let restart: Swift.Bool
  public let regex: Swift.String
  public let values: [Swift.String : Swift.String]
  public let encrypted: Swift.Bool
  public init(regex: Swift.String, description: Swift.String, encrypted: Swift.Bool, restart: Swift.Bool, values: [Swift.String : Swift.String])
  public var wrappedValue: T {
    get
    set
  }
}



@inlinable public func ENCRYPTED() -> Swift.Bool {
  var debug = false
  assert({debug = true; return true}())
  if debug {
    APLLogS(.debug, "ENCRYPTED inlinable -> false")
    return false
  } else {
    APLLogS(.debug, "ENCRYPTED inlinable -> true")
    return true
  }
}
@inlinable public func ENCRYPTED_STRING(_ plain: Swift.String, _ cipher: Swift.String) -> Swift.String {
  var debug = false
  assert({debug = true; return true}())
  if debug {
    APLLogS(.debug, "ENCRYPTED_STRING inlinable -> plain")
    return plain
  } else {
    APLLogS(.debug, "ENCRYPTED_STRING inlinable -> cipher")
    return cipher
  }
}
@inlinable public func ENCRYPTED_STRING_IOS_WATCHOS(_ plain: Swift.String, _ cipherIOS: Swift.String, _ cipherWatchOS: Swift.String) -> Swift.String {
  var debug = false
  assert({debug = true; return true}())
  if debug {
    APLLogS(.debug, "ENCRYPTED_STRING_IOS_WATCHOS inlinable -> plain")
    return plain
  } else {
    #if os(iOS)
       APLLogS(.debug, "ENCRYPTED_STRING_IOS_WATCHOS inlinable -> cipherIOS")
       return cipherIOS
    #else
       APLLogS(.debug, "ENCRYPTED_STRING_IOS_WATCHOS inlinable -> cipherWatchOS")
       return cipherWatchOS
    #endif
  }
}
